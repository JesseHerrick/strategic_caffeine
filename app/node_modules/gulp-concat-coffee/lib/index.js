(function() {
  var Concat, EOL, coffee, fs, gutil, path, through;

  fs = require('fs');

  path = require('path');

  gutil = require('gulp-util');

  coffee = require('gulp-coffee');

  through = require('through');

  Concat = require('concat-with-sourcemaps');

  EOL = '\n';

  module.exports = function(fileName, opt) {
    var concat, firstFile;
    if (opt == null) {
      opt = {};
    }
    if (!fileName) {
      throw new gutil.PluginError('gulp-concat-coffee', 'Missing fileName option for gulp-concat-coffee');
    }
    if (typeof opt.newLine !== 'string') {
      opt.newLine = gutil.linefeed;
    }
    firstFile = null;
    concat = null;
    return through(function(file) {
      var coffeeStream, trace;
      if (file.isNull()) {
        return;
      }
      if (file.isStream()) {
        return this.emit('error', new gutil.PluginError('gulp-concat-coffee', 'Streaming not supported'));
      }
      if (!firstFile) {
        firstFile = file;
      }
      if (!concat) {
        concat = new Concat(!!firstFile.sourceMap, fileName, opt.newLine);
      }
      if (opt.trace) {
        if (path.extname(file.path) === '.html') {
          trace = '<!-- trace:' + path.relative(process.cwd(), file.path) + ' -->' + EOL;
        } else {
          trace = '/* trace:' + path.relative(process.cwd(), file.path) + ' */' + EOL;
        }
      } else {
        trace = '';
      }
      if (path.extname(file.path) === '.coffee') {
        coffeeStream = coffee(opt.coffeeOpt);
        coffeeStream.pipe(through(function(file) {
          return concat.add(file.relative, trace + file.contents.toString(), file.sourceMap);
        }));
        return coffeeStream.end(file);
      } else {
        return concat.add(file.relative, trace + file.contents.toString(), file.sourceMap);
      }
    }, function() {
      var joinedFile, joinedPath;
      if (firstFile) {
        joinedPath = path.join(firstFile.base, fileName);
        joinedFile = new gutil.File({
          cwd: firstFile.cwd,
          base: firstFile.base,
          path: joinedPath,
          contents: new Buffer(concat.content)
        });
        if (concat.sourceMapping) {
          joinedFile.sourceMap = JSON.parse(concat.sourceMap);
        }
        this.emit('data', joinedFile);
      }
      return this.emit('end');
    });
  };

}).call(this);
