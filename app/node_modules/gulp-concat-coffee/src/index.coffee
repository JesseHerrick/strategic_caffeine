fs = require 'fs'
path = require 'path'
gutil = require 'gulp-util'
coffee = require 'gulp-coffee'
through = require 'through'
Concat = require 'concat-with-sourcemaps'

EOL = '\n'

module.exports = (fileName, opt = {}) ->
	throw new gutil.PluginError('gulp-concat-coffee', 'Missing fileName option for gulp-concat-coffee') if not fileName
	if typeof opt.newLine isnt 'string'
		opt.newLine = gutil.linefeed
	firstFile = null
	concat = null
	through(
		(file) ->
			return if file.isNull()
			return @emit 'error', new gutil.PluginError('gulp-concat-coffee', 'Streaming not supported') if file.isStream()
			if not firstFile
				firstFile = file
			if not concat
				concat = new Concat !!firstFile.sourceMap, fileName, opt.newLine
			if opt.trace
				if path.extname(file.path) is '.html'
					trace = '<!-- trace:' + path.relative(process.cwd(), file.path) + ' -->' + EOL
				else
					trace = '/* trace:' + path.relative(process.cwd(), file.path) + ' */' + EOL
			else
				trace = ''
			if path.extname(file.path) is '.coffee'
				coffeeStream = coffee opt.coffeeOpt
				coffeeStream.pipe through(
					(file) ->
						concat.add file.relative, trace + file.contents.toString(), file.sourceMap
				)
				coffeeStream.end file
			else
				concat.add file.relative, trace + file.contents.toString(), file.sourceMap
		->
			if firstFile
				joinedPath = path.join firstFile.base, fileName
				joinedFile = new gutil.File
					cwd: firstFile.cwd
					base: firstFile.base
					path: joinedPath
					contents: new Buffer concat.content
				if concat.sourceMapping
					joinedFile.sourceMap = JSON.parse concat.sourceMap
				@emit 'data', joinedFile
			@emit 'end'
	)
